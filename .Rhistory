registerDoParallel(cl)
wRBF <- train(classe ~ ., method = "svmRadial", tfControl = ctrl,
preProcess = c("center", "scale"), tuneGrid = RBFgrid,
tuneLength = 10, data = wTrain)
stopCluster(cl) # stop parallel processing
pred_wRBF <- predict(wRBF, newdata = wTest)
confusionMatrix(pred_wRBF, wTest$classe)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
wSVM <- train(classe ~ ., method = "svmLinear", tfControl = ctrl,
preProcess = c("center", "scale"), tuneGrid = SVMgrid,
tuneLength = 10, data = wTrain)
stopCluster(cl) # stop parallel processing
pred_wSVM <- predict(wSVM, newdata = wTest)
confusionMatrix(pred_wSVM, wTest$classe)
par(mfrow = c(1, 3))
plot(wRF)
plot(wRBF)
plot(wSVM)
?device
?device
dev.cur()
dev.set(which = "png")
dev.list()
dev.cur()
dev.list
dev.list()
dev.list
dev.cur
dev.cur()
dev.list()
png(filename = "tuning_plot1.png", width = 600, height = 600)
par(mfrow = c(1, 3))
plot(wRF)
plot(wRBF)
plot(wSVM)
png(filename = "tuning_plot1.png", width = 600, height = 600)
png(filename = "tuning_plot1.png", width = 600, height = 600)
par(mfrow = c(1, 3))
plot(wRF)
plot(wRBF)
plot(wSVM)
png(filename = "tuning_plot1.png", width = 600, height = 600)
plot(wRF)
title(main = "Tuning Parameters for Random Forest")
png(filename = "tuning_plot1.png", width = 600, height = 600)
plot(wRF, main = "Tuning Parameters for Random Forest")
plot(wRBF)
png(filename = "tuning_plot1.png", width = 600, height = 600)
plot(wRF, main = "Tuning Parameters for Random Forest")
plot(wRBF, main = "Tuning Parameters for Radial Basis Function")
plot(wSVM, main = "Tuning Parameters for Support Vector Machine")
png(filename = "tuning_plot_rf.png", width = 600, height = 400)
plot(wRF, main = "Tuning Parameters for Random Forest")
png(filename = "tuning_plot_rbf.png", width = 600, height = 400)
plot(wRBF, main = "Tuning Parameters for Radial Basis Function")
png(filename = "tuning_plot_svm.png", width = 600, height = 400)
plot(wSVM, main = "Tuning Parameters for Support Vector Machine")
png(filename = "tuning_plot_rf.png", width = 600, height = 400)
plot(wRF, main = "Tuning Parameters for Random Forest")
png(filename = "tuning_plot_rbf.png", width = 600, height = 400)
plot(wRBF, main = "Tuning Parameters for Radial Basis Function")
#png(filename = "tuning_plot_svm.png", width = 600, height = 400)
#plot(wSVM, main = "Tuning Parameters for Support Vector Machine")
png(filename = "tuning_plot_rf.png", width = 600, height = 400)
plot(wRF, main = "Tuning Parameters for Random Forest")
#png(filename = "tuning_plot_rbf.png", width = 600, height = 400)
#plot(wRBF, main = "Tuning Parameters for Radial Basis Function")
#png(filename = "tuning_plot_svm.png", width = 600, height = 400)
#plot(wSVM, main = "Tuning Parameters for Support Vector Machine")
png(filename = "tuning_plot_rf.png", width = 600, height = 400)
plot(wRF, main = "Tuning Parameters for Random Forest")
dev.off()
png(filename = "tuning_plot_rbf.png", width = 600, height = 400)
plot(wRBF, main = "Tuning Parameters for Radial Basis Function")
dev.off()
png(filename = "tuning_plot_svm.png", width = 600, height = 400)
plot(wSVM, main = "Tuning Parameters for Support Vector Machine")
dev.off()
# train the Combined model on test predictions
in_train <- data.frame(classe = wTrain$classe,
RF = pred_wRF,
RBF = pred_RBF,
SVM = pred_wSVM)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTrain$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTrain$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.01, 0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = ctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.01, 0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = ctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.01, 0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
wCOMB$results
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.01, 0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# a boosted classification tree for stacking
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.01, 0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
wCOMB$results
wCOMB$results
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5), nu = c(0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5), nu = c(0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5), nu = c(1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5), nu = c(3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(3, 5),iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(5),iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, data = in_train)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = ctrl, tuneGrid = COMBctrl, data = in_train)
View(COMBctrl)
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainGrid(method = "cv", number = 3,
savePredictions = "all")
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", tfControl = COMBctrl, tuneGrid = gridCOMB, data = in_train)
stopCluster(cl) # stop parallel processing
# train the Combined model on test predictions
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
SVM = pred_wSVM)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
gridCOMB <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
COMBctrl <- trainControl(method = "cv", number = 3,
savePredictions = "all")
# a boosted classification tree for stacking
wCOMB <- train(classe ~ ., method = "ada", data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
gridGBM <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "ada",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "ada",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(maxdepth = c(1, 3, 5), nu = c(0.03, 0.1, 0.3, 1.0, 3.0), iter = c(100, 200, 300))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "adaboost",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(maxdepth = c(1, 3, 5),
#nu = c(0.03, 0.1, 0.3, 1.0, 3.0),
iter = c(100, 200, 300))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "adaboost",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30),
shrinkage = c(1))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30),
shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
#GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
#                       n.minobsinnode = c(1, 2, 3),
#                       interaction.depth = c(5, 10, 15, 30),
#                       shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
#tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
#GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
#                       n.minobsinnode = c(1, 2, 3),
#                       interaction.depth = c(5, 10, 15, 30),
#                       shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
#tfControl = ctrl,
preProcess = c("center", "scale"),
#tuneGrid = GBMgrid,
data = in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30),
shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = GBMgrid,
data = wTrain)
wGBM$results
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30),
shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
tfControl = ctrl,
preProcess = c("center", "scale"),
#tuneGrid = GBMgrid,
data = wTrain)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
GBMgrid <- expand.grid(n.trees = c(1, 3, 5, 7),
n.minobsinnode = c(1, 2, 3),
interaction.depth = c(5, 10, 15, 30),
shrinkage = c(0.01, 0.03, 0.1, 0.3))
# a boosted classification tree for stacking
wGBM <- train(classe ~ ., method = "gbm",
#tfControl = ctrl,
preProcess = c("center", "scale"),
#tuneGrid = GBMgrid,
data = wTrain)
stopCluster(cl) # stop parallel processing
pred_wGBM <- predict(wGBM, newdata = wTest)
confusionMatrix(pred_wGBM, wTest$classe)
png(filename = "tuning_plot_gbm.png", width = 600, height = 400)
plot(wCOMB, main = "Tuning Parameters for Gradient Boosted Classifier")
png(filename = "tuning_plot_gbm.png", width = 600, height = 400)
plot(wGBM, main = "Tuning Parameters for Gradient Boosted Classifier")
dev.off()
in_train <- data.frame(classe = wTest$classe,
RF = pred_RF,
RBF = pred_RBF,
GBM = pred_GBM)
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
GBM = pred_wGBM)
View(in_train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
in_train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
GBM = pred_wGBM)
wCOMB <- train(classe ~ ., method = "rf",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = RFgrid,
data = in_Train)
cl <- makePSOCKcluster(5) # init parallel processing
registerDoParallel(cl)
in_Train <- data.frame(classe = wTest$classe,
RF = pred_wRF,
RBF = pred_wRBF,
GBM = pred_wGBM)
wCOMB <- train(classe ~ ., method = "rf",
tfControl = ctrl,
preProcess = c("center", "scale"),
tuneGrid = RFgrid,
data = in_Train)
stopCluster(cl) # stop parallel processing
pred_wCOMB <- predict(wCOMB, newdata = wTest)
pred_wCOMB <- predict(wCOMB, newdata = in_Train)
confusionMatrix(pred_wCOMB, wTest$classe)
png(filename = "tuning_plot_comb.png", width = 600, height = 400)
plot(wCOMB, main = "Tuning Parameters for blended model")
dev.off()
val_wRF <- predict(wRF, newdata = wVal)
confusionMatrix(val_wRF, wVal$classe)
val_wRBF <- predict(wRBF, newdata = wVal)
confusionMatrix(val_wRBF, wVal$classe)
val_wGBM <- predict(wGBM, newdata = wVal)
confusionMatrix(val_wGBM, wVal$classe)
in_Val <- data.frame(classe = wTest$classe,
RF = val_wRF,
RBF = val_wRBF,
GBM = val_wGBM)
in_Val <- data.frame(classe = wVal$classe,
RF = val_wRF,
RBF = val_wRBF,
GBM = val_wGBM)
val_wCOMB <- predict(wCOMB, newdata = in_Val)
confusionMatrix(val_wCOMB, wVal$classe)
in_Val <- data.frame(classe = wVal$classe,
RF = val_wRF,
RBF = val_wRBF,
GBM = val_wGBM)
val_wCOMB <- predict(wCOMB, newdata = in_Val)
confusionMatrix(val_wCOMB, wVal$classe)
